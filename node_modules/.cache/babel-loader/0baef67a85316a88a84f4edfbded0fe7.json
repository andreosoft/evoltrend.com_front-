{"remainingRequest":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/babel-loader/lib/index.js!/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/eslint-loader/index.js??ref--13-0!/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/src/widgets/view2/edit.js","dependencies":[{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/src/widgets/view2/edit.js","mtime":1591093190598},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport axios from \"axios\";\nimport mixingValidator from \"@/widgets/common/validators\";\nexport default {\n  mixins: [mixingValidator],\n  data: function data() {\n    return {\n      loading: false,\n      data: {},\n      validators: {},\n      errors: {}\n    };\n  },\n  created: function created() {\n    var _iterator = _createForOfIteratorHelper(this.fields),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var el = _step.value;\n        this.$set(this.errors, el.name, null);\n\n        if (el.validator) {\n          var name = el.name;\n\n          if (el.type == \"ref\") {\n            name = name + \"_id\";\n          }\n\n          this.$set(this.validators, name, el.validator);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  },\n  methods: {\n    submitForm: function () {\n      var _submitForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.validateAll(this.data);\n\n              case 2:\n                if (!_context.sent) {\n                  _context.next = 5;\n                  break;\n                }\n\n                this.submit(this.data, this.api);\n                return _context.abrupt(\"return\", true);\n\n              case 5:\n                return _context.abrupt(\"return\", false);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function submitForm() {\n        return _submitForm.apply(this, arguments);\n      }\n\n      return submitForm;\n    }(),\n    submit: function submit(data, api) {\n      var _this = this;\n\n      this.loading = true;\n      axios.post(api, data).then(function (response) {\n        _this.loading = false;\n\n        _this.$root.$emit(\"show-info\", {\n          text: \"Данные записаны\",\n          class: \"info\"\n        });\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    validateAll: function () {\n      var _validateAll = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(data) {\n        var noerror, key;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                noerror = true;\n                _context2.t0 = regeneratorRuntime.keys(data);\n\n              case 2:\n                if ((_context2.t1 = _context2.t0()).done) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                key = _context2.t1.value;\n                _context2.next = 6;\n                return this.validate(key);\n\n              case 6:\n                if (!_context2.sent) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                noerror = false;\n\n              case 8:\n                _context2.next = 2;\n                break;\n\n              case 10:\n                return _context2.abrupt(\"return\", noerror);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function validateAll(_x) {\n        return _validateAll.apply(this, arguments);\n      }\n\n      return validateAll;\n    }(),\n    validate: function () {\n      var _validate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(key) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.validator(this.validators[key], key, this.data);\n\n              case 2:\n                return _context3.abrupt(\"return\", this.errors[key] = _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function validate(_x2) {\n        return _validate.apply(this, arguments);\n      }\n\n      return validate;\n    }()\n  }\n};",{"version":3,"sources":["/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/src/widgets/view2/edit.js"],"names":["axios","mixingValidator","mixins","data","loading","validators","errors","created","fields","el","$set","name","validator","type","methods","submitForm","validateAll","submit","api","post","then","response","$root","$emit","text","class","catch","e","console","log","noerror","key","validate"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport mixingValidator from \"@/widgets/common/validators\";\n\nexport default {\n    mixins: [mixingValidator],\n    data: function () {\n        return {\n            loading: false,\n            data: {},\n            validators: {},\n            errors: {}\n        }\n    },\n    created() {\n        for (let el of this.fields) {\n            this.$set(this.errors, el.name, null)\n            if (el.validator) {\n                let name = el.name;\n                if (el.type == \"ref\") {\n                    name = name + \"_id\";\n                }\n                this.$set(this.validators, name, el.validator)\n            }\n        }\n    },\n    methods: {\n        submitForm: async function () {\n            if (await this.validateAll(this.data)) {\n                this.submit(this.data, this.api);\n                return true;\n            }\n            return false;\n        },\n        submit: function (data, api) {\n            this.loading = true;\n            axios\n                .post(api, data)\n                .then(response => {\n                    this.loading = false;\n                    this.$root.$emit(\"show-info\", {\n                        text: \"Данные записаны\",\n                        class: \"info\"\n                    });\n                })\n                .catch(e => {\n                    console.log(e);\n                });\n        },\n        validateAll: async function (data) {\n            var noerror = true;\n            for (var key in data) {\n                if (await this.validate(key)) {\n                    noerror = false;\n                }\n            }\n            return noerror;\n        },\n        validate: async function (key) {\n            return (this.errors[key] = await this.validator(\n                this.validators[key],\n                key,\n                this.data\n            ));\n        }\n    }\n};"]}]}