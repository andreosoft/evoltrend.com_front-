{"remainingRequest":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/babel-loader/lib/index.js!/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/eslint-loader/index.js??ref--13-0!/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/src/widgets/view2/view.js","dependencies":[{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/src/widgets/view2/view.js","mtime":1591093173722},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport axios from \"axios\";\nexport default {\n  data: function data() {\n    return {\n      api: null,\n      loading: false,\n      data: {}\n    };\n  },\n  created: function created() {\n    var _iterator = _createForOfIteratorHelper(this.fields),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var el = _step.value;\n        this.$set(this.data, el.name, null);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    this.fetchData();\n  },\n  watch: {\n    $route: \"updateRoute\"\n  },\n  updateRoute: function updateRoute() {\n    this.fetchData();\n  },\n  methods: {\n    fetchData: function fetchData() {\n      var _this = this;\n\n      var id = this.$route.params.id;\n\n      if (id) {\n        this.loading = true;\n        axios.get(this.api, {\n          params: {\n            id: id\n          }\n        }).then(function (response) {\n          _this.loading = false;\n          Object.assign(_this.data, response.data.data);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/src/widgets/view2/view.js"],"names":["axios","data","api","loading","created","fields","el","$set","name","fetchData","watch","$route","updateRoute","methods","id","params","get","then","response","Object","assign","catch","error","console","log"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe;AACXC,EAAAA,IAAI,EAAE,gBAAY;AACd,WAAO;AACHC,MAAAA,GAAG,EAAE,IADF;AAEHC,MAAAA,OAAO,EAAE,KAFN;AAGHF,MAAAA,IAAI,EAAE;AAHH,KAAP;AAKH,GAPU;AAQXG,EAAAA,OARW,qBAQD;AAAA,+CACS,KAAKC,MADd;AAAA;;AAAA;AACN,0DAA4B;AAAA,YAAnBC,EAAmB;AACxB,aAAKC,IAAL,CAAU,KAAKN,IAAf,EAAqBK,EAAE,CAACE,IAAxB,EAA8B,IAA9B;AACH;AAHK;AAAA;AAAA;AAAA;AAAA;;AAIN,SAAKC,SAAL;AACH,GAbU;AAcXC,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAAE;AADL,GAdI;AAiBXC,EAAAA,WAAW,EAAE,uBAAY;AACrB,SAAKH,SAAL;AACH,GAnBU;AAoBXI,EAAAA,OAAO,EAAE;AACLJ,IAAAA,SADK,uBACO;AAAA;;AACR,UAAIK,EAAE,GAAG,KAAKH,MAAL,CAAYI,MAAZ,CAAmBD,EAA5B;;AACA,UAAIA,EAAJ,EAAQ;AACJ,aAAKX,OAAL,GAAe,IAAf;AACAH,QAAAA,KAAK,CACAgB,GADL,CACS,KAAKd,GADd,EACmB;AAAEa,UAAAA,MAAM,EAAE;AAAED,YAAAA,EAAE,EAAEA;AAAN;AAAV,SADnB,EAEKG,IAFL,CAEU,UAAAC,QAAQ,EAAI;AACd,UAAA,KAAI,CAACf,OAAL,GAAe,KAAf;AACAgB,UAAAA,MAAM,CAACC,MAAP,CAAc,KAAI,CAACnB,IAAnB,EAAyBiB,QAAQ,CAACjB,IAAT,CAAcA,IAAvC;AACH,SALL,EAMKoB,KANL,CAMW,UAAAC,KAAK,EAAI;AAAEC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAAoB,SAN1C;AAOH;AACJ;AAbI;AApBE,CAAf","sourcesContent":["import axios from \"axios\";\n\nexport default {\n    data: function () {\n        return {\n            api: null,\n            loading: false,\n            data: {}\n        };\n    },\n    created() {\n        for (let el of this.fields) {\n            this.$set(this.data, el.name, null)\n        }\n        this.fetchData()\n    },\n    watch: {\n        $route: \"updateRoute\"\n    },\n    updateRoute: function () {\n        this.fetchData();\n    },\n    methods: {\n        fetchData() {\n            var id = this.$route.params.id\n            if (id) {\n                this.loading = true\n                axios\n                    .get(this.api, { params: { id: id } })\n                    .then(response => {\n                        this.loading = false\n                        Object.assign(this.data, response.data.data);\n                    })\n                    .catch(error => { console.log(error) })\n            }\n        },\n    }\n};"]}]}