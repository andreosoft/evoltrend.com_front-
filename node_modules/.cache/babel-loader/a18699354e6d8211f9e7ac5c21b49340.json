{"remainingRequest":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/babel-loader/lib/index.js!/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/eslint-loader/index.js??ref--13-0!/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/src/mixins/submit_and_validate.js","dependencies":[{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/src/mixins/submit_and_validate.js","mtime":1590832305224},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport mixingValidator from \"./validators\";\nexport default {\n  mixins: [mixingValidator],\n  methods: {\n    submitForm: function () {\n      var _submitForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.$nextTick( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _this.validateAll(_this.fields);\n\n                        case 2:\n                          if (!_context.sent) {\n                            _context.next = 5;\n                            break;\n                          }\n\n                          _this.submit(_this.fields, _this.api);\n\n                          return _context.abrupt(\"return\", true);\n\n                        case 5:\n                          return _context.abrupt(\"return\", false);\n\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function submitForm() {\n        return _submitForm.apply(this, arguments);\n      }\n\n      return submitForm;\n    }(),\n    submit: function submit(fields, api) {\n      var _this2 = this;\n\n      this.loading = true;\n      axios.post(api, fields).then(function (response) {\n        _this2.loading = false;\n        _this2.fields.id = response.data.id;\n\n        _this2.$root.$emit(\"show-info\", {\n          text: \"Данные записаны\",\n          class: \"info\"\n        });\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    validateAll: function () {\n      var _validateAll = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(fields) {\n        var noerror, key;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                noerror = true;\n                _context3.t0 = regeneratorRuntime.keys(fields);\n\n              case 2:\n                if ((_context3.t1 = _context3.t0()).done) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                key = _context3.t1.value;\n                _context3.next = 6;\n                return this.validate(key);\n\n              case 6:\n                if (!_context3.sent) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                noerror = false;\n\n              case 8:\n                _context3.next = 2;\n                break;\n\n              case 10:\n                return _context3.abrupt(\"return\", noerror);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function validateAll(_x) {\n        return _validateAll.apply(this, arguments);\n      }\n\n      return validateAll;\n    }(),\n    validate: function () {\n      var _validate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(key) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.validator(this.validators[key], key, this.fields);\n\n              case 2:\n                return _context4.abrupt(\"return\", this.errors[key] = _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function validate(_x2) {\n        return _validate.apply(this, arguments);\n      }\n\n      return validate;\n    }()\n  }\n};",{"version":3,"sources":["/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/src/mixins/submit_and_validate.js"],"names":["axios","mixingValidator","mixins","methods","submitForm","$nextTick","validateAll","fields","submit","api","loading","post","then","response","id","data","$root","$emit","text","class","catch","e","console","log","noerror","key","validate","validator","validators","errors"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP;AAEA,eAAe;AACXC,EAAAA,MAAM,EAAE,CAACD,eAAD,CADG;AAEXE,EAAAA,OAAO,EAAE;AACLC,IAAAA,UAAU;AAAA,gFAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AACR,qBAAKC,SAAL,uEAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACD,KAAI,CAACC,WAAL,CAAiB,KAAI,CAACC,MAAtB,CADC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEP,0BAAA,KAAI,CAACC,MAAL,CAAY,KAAI,CAACD,MAAjB,EAAyB,KAAI,CAACE,GAA9B;;AAFO,2DAGA,IAHA;;AAAA;AAAA,2DAKJ,KALI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAf;;AADQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADL;AAULD,IAAAA,MAAM,EAAE,gBAAUD,MAAV,EAAkBE,GAAlB,EAAuB;AAAA;;AAC3B,WAAKC,OAAL,GAAe,IAAf;AACAV,MAAAA,KAAK,CACAW,IADL,CACUF,GADV,EACeF,MADf,EAEKK,IAFL,CAEU,UAAAC,QAAQ,EAAI;AACd,QAAA,MAAI,CAACH,OAAL,GAAe,KAAf;AACA,QAAA,MAAI,CAACH,MAAL,CAAYO,EAAZ,GAAiBD,QAAQ,CAACE,IAAT,CAAcD,EAA/B;;AACA,QAAA,MAAI,CAACE,KAAL,CAAWC,KAAX,CAAiB,WAAjB,EAA8B;AAC1BC,UAAAA,IAAI,EAAE,iBADoB;AAE1BC,UAAAA,KAAK,EAAE;AAFmB,SAA9B;AAIH,OATL,EAUKC,KAVL,CAUW,UAAAC,CAAC,EAAI;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH,OAZL;AAaH,KAzBI;AA0BLf,IAAAA,WAAW;AAAA,iFAAE,kBAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACLiB,gBAAAA,OADK,GACK,IADL;AAAA,uDAEOjB,MAFP;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEAkB,gBAAAA,GAFA;AAAA;AAAA,uBAGK,KAAKC,QAAL,CAAcD,GAAd,CAHL;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIDD,gBAAAA,OAAO,GAAG,KAAV;;AAJC;AAAA;AAAA;;AAAA;AAAA,kDAOFA,OAPE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OA1BN;AAmCLE,IAAAA,QAAQ;AAAA,8EAAE,kBAAgBD,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC2B,KAAKE,SAAL,CAC7B,KAAKC,UAAL,CAAgBH,GAAhB,CAD6B,EAE7BA,GAF6B,EAG7B,KAAKlB,MAHwB,CAD3B;;AAAA;AAAA,kDACE,KAAKsB,MAAL,CAAYJ,GAAZ,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAnCH;AAFE,CAAf","sourcesContent":["import axios from \"axios\";\nimport mixingValidator from \"./validators\";\n\nexport default {\n    mixins: [mixingValidator],\n    methods: {\n        submitForm: async function () {\n            this.$nextTick(async () => {\n                if (await this.validateAll(this.fields)) {\n                    this.submit(this.fields, this.api);\n                    return true;\n                }\n                return false;\n            });\n        },\n        submit: function (fields, api) {\n            this.loading = true;\n            axios\n                .post(api, fields)\n                .then(response => {\n                    this.loading = false;\n                    this.fields.id = response.data.id;\n                    this.$root.$emit(\"show-info\", {\n                        text: \"Данные записаны\",\n                        class: \"info\"\n                    });\n                })\n                .catch(e => {\n                    console.log(e);\n                });\n        },\n        validateAll: async function (fields) {\n            var noerror = true;\n            for (var key in fields) {\n                if (await this.validate(key)) {\n                    noerror = false;\n                }\n            }\n            return noerror;\n        },\n        validate: async function (key) {\n            return (this.errors[key] = await this.validator(\n                this.validators[key],\n                key,\n                this.fields\n            ));\n        }\n    }\n};"]}]}