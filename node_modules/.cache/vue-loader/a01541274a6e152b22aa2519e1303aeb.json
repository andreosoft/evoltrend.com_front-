{"remainingRequest":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/src/widgets/uploads/BaseImages.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/src/widgets/uploads/BaseImages.vue","mtime":1571680727061},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/dev/www/evoltrend.com/evoltrend.com_front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\";\n\nexport default {\n  props: {\n    value: Array,\n    error: {\n      type: String,\n      default: \"\"\n    },\n    api: String,\n    url: String\n  },\n  data() {\n    return {\n      id: null,\n      data: this.value,\n      files: [],\n      status: 0\n    };\n  },\n  mounted() {\n    this.id = this._uid;\n  },\n  methods: {\n    remove: function(key) {\n      this.data.splice(key, 1);\n      this.$emit(\"input\", this.data);\n    },\n    upload: function() {\n      for (var el of this.$refs.file.files) {\n        var e = {\n          file: el,\n          status: 0\n        };\n        this.files.push(e);\n      }\n      for (var el of this.files) {\n        this.upload_file(el);\n      }\n    },\n    upload_file: function(file) {\n      let formData = new FormData();\n      formData.append(\"file\", file.file);\n      formData.append(\"name\", file.file.name);\n      axios\n        .post(this.api, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          },\n          onUploadProgress: progressEvent => {\n            file.status = parseInt(\n              (progressEvent.loaded / progressEvent.total) * 100\n            );\n          }\n        })\n        .then(response => {\n          if (response.data.status == \"ok\") {\n            this.files.splice(this.files.indexOf(file), 1);\n            this.data.push(response.data.data);\n            this.$emit(\"input\", this.data);\n          }\n        })\n        .catch(function(error) {\n          console.log(\"FAILURE!!\", error);\n        });\n    }\n  }\n};\n",{"version":3,"sources":["BaseImages.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseImages.vue","sourceRoot":"src/widgets/uploads","sourcesContent":["<template>\n  <div>\n    <div>\n      <div v-for=\"(el, key) in data\" :key=\"key\">\n        <div>\n        <img :src=\"url + el.file\"  style=\"width: 200px;\"/>\n        </div>\n        <button @click=\"remove(key)\">удалить</button>\n      </div>\n    </div>\n    <div>\n      <input v-on:change=\"upload()\" ref=\"file\" type=\"file\" style=\"display: none\" :id=\"id+'-in'\" multiple/>\n      <label class=\"btn btn-secondary\" :for=\"id+'-in'\">Загрузить файлы</label>\n      <div>\n        <transition name=\"fade\" v-for=\"(el,key) in files\" :key=\"key\">\n          <div class=\"file-image-el row\" style=\"align-items: center;\">\n            <div class=\"col-6\">{{el.file.name}}</div>\n            <div class=\"col-6\">\n              <div class=\"progress\">\n                <div class=\"progress-bar\" :style=\"{width: el.status + '%'}\">{{el.status}}%</div>\n              </div>\n            </div>\n          </div>\n        </transition>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  props: {\n    value: Array,\n    error: {\n      type: String,\n      default: \"\"\n    },\n    api: String,\n    url: String\n  },\n  data() {\n    return {\n      id: null,\n      data: this.value,\n      files: [],\n      status: 0\n    };\n  },\n  mounted() {\n    this.id = this._uid;\n  },\n  methods: {\n    remove: function(key) {\n      this.data.splice(key, 1);\n      this.$emit(\"input\", this.data);\n    },\n    upload: function() {\n      for (var el of this.$refs.file.files) {\n        var e = {\n          file: el,\n          status: 0\n        };\n        this.files.push(e);\n      }\n      for (var el of this.files) {\n        this.upload_file(el);\n      }\n    },\n    upload_file: function(file) {\n      let formData = new FormData();\n      formData.append(\"file\", file.file);\n      formData.append(\"name\", file.file.name);\n      axios\n        .post(this.api, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          },\n          onUploadProgress: progressEvent => {\n            file.status = parseInt(\n              (progressEvent.loaded / progressEvent.total) * 100\n            );\n          }\n        })\n        .then(response => {\n          if (response.data.status == \"ok\") {\n            this.files.splice(this.files.indexOf(file), 1);\n            this.data.push(response.data.data);\n            this.$emit(\"input\", this.data);\n          }\n        })\n        .catch(function(error) {\n          console.log(\"FAILURE!!\", error);\n        });\n    }\n  }\n};\n</script>\n"]}]}