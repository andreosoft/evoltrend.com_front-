{"remainingRequest":"/home/andrey/dev/www/evoltrend.com/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrey/dev/www/evoltrend.com/front/src/widgets/mask/BaseMaskInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/andrey/dev/www/evoltrend.com/front/src/widgets/mask/BaseMaskInput.vue","mtime":1571927448931},{"path":"/home/andrey/dev/www/evoltrend.com/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/dev/www/evoltrend.com/front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/andrey/dev/www/evoltrend.com/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/dev/www/evoltrend.com/front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// import { VueMaskDirective } from \"./v-mask\";\n// import Vue from \"vue\";\n\n// Vue.directive(\"mask\", VueMaskDirective);\n\nexport default {\n  props: {\n    value: String,\n    template: String,\n    type: {\n      type: String,\n      default: \"text\"\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    error: {\n      type: String,\n      default: \"\"\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    req: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: String,\n      default: \"\"\n    },\n    class_label: {\n      type: String,\n      default: \"col-sm-4\"\n    },\n    class_input: {\n      type: String,\n      default: \"col-sm-8\"\n    }\n  },\n  data: function() {\n    return {\n      res_placeholder: null\n    };\n  },\n  watch: {\n    value: function(value, previousValue) {\n      let val;\n      if (previousValue === null) {\n        previousValue = '';\n      }\n      if (value && value !== previousValue && value.length > previousValue.length) {\n        val = this.format(value, this.template);\n      } else {\n        val = value;\n      }\n      \n      let s = this.placeholder.split(\"\");\n      for (let i = 0; i < val.length; i++) {\n        s[i] = val[i];\n      }\n      this.res_placeholder = s.join(\"\");\n      this.$emit('input', val);\n    }\n  },\n  created() {\n    this.res_placeholder = this.placeholder;\n  },\n  methods: {\n    format: function(text, wholeMask) {\n      if (!wholeMask) return text;\n\n      var maskStartRegExp = /^([^#ANX]+)/;\n      if (+text.length === 1 && maskStartRegExp.test(wholeMask)) {\n        text = maskStartRegExp.exec(wholeMask)[0] + text;\n      }\n\n      var newText = \"\";\n\n      for (var maskIndex = 0; maskIndex < wholeMask.length; maskIndex += 1) {\n        var mask = wholeMask.charAt(maskIndex);\n\n        switch (mask) {\n          case \"#\":\n            break;\n          case \"A\":\n            break;\n          case \"?\":\n            break;\n          case \"N\":\n            break;\n          case \"X\":\n            break;\n          default:\n            text = text.replace(mask, \"\");\n        }\n      }\n      var i = 0;\n      for (\n        var _maskIndex = 0, x = 1;\n        x && _maskIndex < wholeMask.length;\n        _maskIndex += 1\n      ) {\n        var char = text.charAt(i);\n        var _mask = wholeMask.charAt(_maskIndex);\n        i += 1;\n        switch (_mask) {\n          case \"#\":\n            /\\d/.test(char) ? (newText += char) : (x = 0);\n            break;\n          case \"A\":\n            /[a-zа-я]/i.test(char) ? (newText += char) : (x = 0);\n            break;\n          case \"N\":\n            /[a-zа-я0-9]/i.test(char) ? (newText += char) : (x = 0);\n            break;\n          default:\n            newText += _mask;\n            i -= 1;\n            break;\n        }\n      }\n\n      return newText;\n    }\n  }\n};\n",{"version":3,"sources":["BaseMaskInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"BaseMaskInput.vue","sourceRoot":"src/widgets/mask","sourcesContent":["<template>\n  <div class=\"form-group row\">\n    <label :class=\"class_label\" class=\"col-form-label text-right-sm\">\n      {{label}}\n      <span v-if=\"req\" style=\"color: #f00\">*</span>:\n    </label>\n    <div :class=\"class_input\">\n      <input tabindex=\"-1\" class=\"form-control b-select-placeholder\" :value=\"res_placeholder\" />\n      <input\n        class=\"b-select-input\"\n        :class=\"{'is-invalid': error}\"\n        :disabled=\"disabled\"\n        :value=\"value\"\n        @input=\"$emit('input', $event.target.value)\"\n        type=\"text\"\n      />\n      <template v-if=\"error\">\n        <div class=\"invalid-feedback\">{{error}}</div>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script>\n// import { VueMaskDirective } from \"./v-mask\";\n// import Vue from \"vue\";\n\n// Vue.directive(\"mask\", VueMaskDirective);\n\nexport default {\n  props: {\n    value: String,\n    template: String,\n    type: {\n      type: String,\n      default: \"text\"\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    error: {\n      type: String,\n      default: \"\"\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    req: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: String,\n      default: \"\"\n    },\n    class_label: {\n      type: String,\n      default: \"col-sm-4\"\n    },\n    class_input: {\n      type: String,\n      default: \"col-sm-8\"\n    }\n  },\n  data: function() {\n    return {\n      res_placeholder: null\n    };\n  },\n  watch: {\n    value: function(value, previousValue) {\n      let val;\n      if (previousValue === null) {\n        previousValue = '';\n      }\n      if (value && value !== previousValue && value.length > previousValue.length) {\n        val = this.format(value, this.template);\n      } else {\n        val = value;\n      }\n      \n      let s = this.placeholder.split(\"\");\n      for (let i = 0; i < val.length; i++) {\n        s[i] = val[i];\n      }\n      this.res_placeholder = s.join(\"\");\n      this.$emit('input', val);\n    }\n  },\n  created() {\n    this.res_placeholder = this.placeholder;\n  },\n  methods: {\n    format: function(text, wholeMask) {\n      if (!wholeMask) return text;\n\n      var maskStartRegExp = /^([^#ANX]+)/;\n      if (+text.length === 1 && maskStartRegExp.test(wholeMask)) {\n        text = maskStartRegExp.exec(wholeMask)[0] + text;\n      }\n\n      var newText = \"\";\n\n      for (var maskIndex = 0; maskIndex < wholeMask.length; maskIndex += 1) {\n        var mask = wholeMask.charAt(maskIndex);\n\n        switch (mask) {\n          case \"#\":\n            break;\n          case \"A\":\n            break;\n          case \"?\":\n            break;\n          case \"N\":\n            break;\n          case \"X\":\n            break;\n          default:\n            text = text.replace(mask, \"\");\n        }\n      }\n      var i = 0;\n      for (\n        var _maskIndex = 0, x = 1;\n        x && _maskIndex < wholeMask.length;\n        _maskIndex += 1\n      ) {\n        var char = text.charAt(i);\n        var _mask = wholeMask.charAt(_maskIndex);\n        i += 1;\n        switch (_mask) {\n          case \"#\":\n            /\\d/.test(char) ? (newText += char) : (x = 0);\n            break;\n          case \"A\":\n            /[a-zа-я]/i.test(char) ? (newText += char) : (x = 0);\n            break;\n          case \"N\":\n            /[a-zа-я0-9]/i.test(char) ? (newText += char) : (x = 0);\n            break;\n          default:\n            newText += _mask;\n            i -= 1;\n            break;\n        }\n      }\n\n      return newText;\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\">\n.b-select-placeholder {\n  color: #999;\n}\n\n.b-select-input {\n  position: absolute;\n  left: 15px;\n  right: 15px;\n  top: 0;\n  margin: 0 20px 0 13px;\n  width: 100%;\n  padding: 7px 60px 6px 0px;\n  border: none;\n  background: #fff0;\n  outline: none;\n  color: #555;\n}\n</style>"]}]}